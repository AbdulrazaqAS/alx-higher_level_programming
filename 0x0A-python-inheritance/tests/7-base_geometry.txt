Test for class "BaseGeometry"

>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.integer_validator("Size", 3)

>>> bg.integer_validator("Size", (1, 2, 3))  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: Size must be an integer

>>> bg.integer_validator("Size", [])  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: Size must be an integer

>>> bg.integer_validator("Size", -1)  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
ValueError: Size must be greater than 0

>>> bg.integer_validator("Size", 0)  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
ValueError: Size must be greater than 0


>>> bg.integer_validator()  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age")  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("age", "4")  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("Size", True)  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: Size must be an integer

>>> bg.integer_validator("Size", {3, 4})  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: Size must be an integer

>>> bg.integer_validator("Size", None)  # doctest: +ELLIPSIS
Traceback (most recent call last):
...
TypeError: Size must be an integer
